# Results


```{r, warning=FALSE}
library(dplyr)
library(ggplot2)
library(stringr)

data <- read.csv("collisions.csv")

# converting the empty char cells to NA
data <-  mutate_all(data, ~ifelse(is.character(.x) & nchar(.x) == 0, NA, .x))

```


## Graph 1: Crash Severity by Borough
A bar graph or pie chart to visualize the distribution of crash severity across different boroughs in New York City. This can help identify areas with higher concentrations of severe crashes, allowing for targeted interventions.


```{r, warning=FALSE}

data1 <- data[c("BOROUGH","NUMBER.OF.PERSONS.INJURED","NUMBER.OF.PERSONS.KILLED")]

# Group by borough and calculate the sum of people killed and injured
summarized_data1 <- data1 %>%
  group_by(BOROUGH) %>%
  summarise(SUM.KILLED = sum(NUMBER.OF.PERSONS.KILLED, na.rm = TRUE),
            SUM.INJURED = sum(NUMBER.OF.PERSONS.INJURED, na.rm = TRUE))

summarized_data1

# Melt the dataframe to long format for better plotting - like pivot_longer
library(reshape2)
long_data1 <- melt(summarized_data1, id.vars = "BOROUGH")


# Create a side-by-side bar chart for Number of people killed and injured per borough
ggplot(long_data1, aes(x = BOROUGH, y = value, fill = variable)) +
  geom_bar(position = "dodge", stat = "identity", width = 0.7) +
  labs(title = "Side-by-Side Bar Chart of Number of people killed & Injured",
       x = "Borough",
       y = "Count",
       fill = "Category") +
  theme_minimal()

```

```{r, warning=FALSE}
# Create a pie chart for the number of people killed per borough
ggplot(summarized_data1, aes(x = "", y = SUM.KILLED, fill = BOROUGH)) +
  geom_bar(stat = "identity", width = 1, color = "white") +
  geom_text(aes(label = scales::percent(SUM.KILLED / sum(SUM.KILLED, na.rm=TRUE))),
            position = position_stack(vjust = 0.5), size = 4) +
  coord_polar("y") +
  labs(title = "Number of People Killed per Borough",
       x = "", y = "",
       fill = "Borough") +
  theme_minimal() +
  theme(axis.text.x = element_blank())  # Remove x-axis ticks

# Create a pie chart for the number of people INJURED per borough
ggplot(summarized_data1, aes(x = "", y = SUM.INJURED, fill = BOROUGH)) +
  geom_bar(stat = "identity", width = 1, color = "white") +
  geom_text(aes(label = scales::percent(SUM.INJURED / sum(SUM.INJURED, na.rm=TRUE))),
            position = position_stack(vjust = 0.5), size = 4) +
  coord_polar("y") +
  labs(title = "Number of People Injured per Borough",
       x = "", y = "",
       fill = "Borough") +
  theme_minimal() +
  theme(axis.text.x = element_blank())  # Remove x-axis ticks
```


## Graph 2: Crash Frequency by Day of the Week and Time of Day
A heatmap to represent the frequency of crashes by day of the week and hour of the day. This can reveal patterns in crash occurrence, suggesting potential countermeasures like increased enforcement or public awareness campaigns during high-risk periods.


```{r, warning=FALSE}
library(chron)
library(lubridate)

# convert CRASH.DATE column from char to date
data$CRASH.DATE <- as.Date(data$CRASH.DATE, format = "%m/%d/%Y")

data2 <- data[c("CRASH.DATE", "CRASH.TIME")]

# convert CRASH.TIME column from char to POSIXct time
data2$CRASH.TIME <- as.POSIXct(data$CRASH.TIME, format = "%H:%M")



# convert CRASH.DATE column from char to date
#data2$CRASH.DATE <- as.Date(data2$CRASH.DATE, format = "%m/%d/%y")
#data2$CRASH.TIME <- chron(times = paste(data2$CRASH.TIME, ":00"))
#data2$CRASH.TIME <- as.POSIXct(data2$CRASH.TIME, format = "%H:%M")

# Extract day of the week and hour of the day
data2 <- data2 %>%
  mutate(DayOfWeek = weekdays(CRASH.DATE),
         HourOfDay = hour(CRASH.TIME))

# Convert DayOfWeek to factor 
data2$DayOfWeek <- factor(data2$DayOfWeek, levels = rev(c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")))

# group by DayOfWeek and HourOfDay to represent
summarized_data2 <- data2 %>%
  group_by(DayOfWeek, HourOfDay) %>%
  summarise(Frequency = n())

summarized_data2

# Create a heatmap
ggplot(summarized_data2, aes(y = DayOfWeek, x = HourOfDay, fill= Frequency )) +
  geom_tile(stat = "identity") +
  scale_fill_viridis_c(trans = "reverse") +  
  labs(title = "Heatmap for DayOfWeek and HourOfDay",
       x = "Hour of the Day",
       y = "Day of the Week",
       fill = "Frequency") +
  theme_minimal()

```


## Graph 3: Bargraph & Cleveland for Most Frequently Involved Vehicles and Contributing Factors in Collisions


```{r, warning=FALSE}
#| fig-width: 28
#| fig-height: 18

```

```{r, warning=FALSE}

#taking top 30 most frequent vehicles involved in collisions
vehicles <- sort(table(data$VEHICLE.TYPE.CODE.1),decreasing = TRUE)[seq(1,30)]

# Convert the vehicles vector to a dataframe
data31 <- data.frame(Values = vehicles)
colnames(data31) <- c("vehicle", "frequency")
data31

ggplot(data31, aes(y = frequency, x = vehicle)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  labs(title = "Bar Graph with Most Frequently Involved Vehicles", 
       x = "Vehicles", 
       y = "Number of Cases") +
  theme_minimal() +
  scale_y_continuous(labels = scales::comma) +
  coord_flip()

# Create a Cleveland dot plot
ggplot(data31, aes(x = vehicle, y = frequency)) +
  geom_point(position = "jitter", color = "blue", size = 2) +
  labs(title = "Cleveland Dot Plot with Most Frequently Involved Vehicles", 
       x = "Vehicles", 
       y = "Number of Cases") +
  theme_minimal() +
  scale_y_continuous(labels = scales::comma) +
  coord_flip()


```

```{r, warning=FALSE}

#taking top 20 most frequent contributing factors in collisions
factors <- sort(table(data$CONTRIBUTING.FACTOR.VEHICLE.1), decreasing = TRUE)[seq(1,20)]

# Convert the factors vector to a dataframe 
data32 <- data.frame(Values = factors)
colnames(data32) <- c("factor", "frequency")
data32

ggplot(data32, aes(y = frequency, x = factor)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  labs(title = "Bar Graph with Most Frequently Contributing Factors",
       x = "Contributing Factors",
       y = "Number of Cases") +
  theme_minimal() +
  scale_y_continuous(labels = scales::comma) +
  coord_flip()

# Create a Cleveland dot plot
ggplot(data32, aes(x = factor, y = frequency)) +
  geom_point(position = "jitter", color = "blue", size = 2) +
  labs(title = "Cleveland Dot Plot with Most Frequently Contributing Factors",
       x = "Contributing Factors",
       y = "Number of Cases") +
  theme_minimal() +
  scale_y_continuous(labels = scales::comma) +
  coord_flip()

```



## Graph 4: Stacked Barchart of Fatality_Type with Percentage of Person_Involved_Type


```{r, warning=FALSE}
library(tidyr)

# You can use your entire dataset or filter it based on your analysis needs
data4 <- data[c("NUMBER.OF.PEDESTRIANS.INJURED", "NUMBER.OF.PEDESTRIANS.KILLED",
                "NUMBER.OF.CYCLIST.INJURED", "NUMBER.OF.CYCLIST.KILLED",
                "NUMBER.OF.MOTORIST.INJURED", "NUMBER.OF.MOTORIST.KILLED")]

# Pivot longer the columns
data4_long <- data4 %>%
  pivot_longer(
    cols = starts_with("NUMBER.OF."),
    names_to = "Category",
    values_to = "Count"
  ) 

# summarizing by group sum
data4_summarized <- data4_long %>%
  group_by(Category) %>%
  summarise(Count = sum(Count))

# adding new column person_involved and fatality_type with information for the existing data
data4_summarized <- data4_summarized %>%
  mutate(
    person_involved = gsub("NUMBER.OF.(\\w+)\\.(\\w+)", "\\1", Category),
    fatality_type = gsub("NUMBER.OF.(\\w+)\\.(\\w+)", "\\2", Category)
  )

# Drop the Category column
data4_summarized <- data4_summarized[, c("person_involved", "fatality_type", "Count")]

# Calculate percentages for each combination of fatality_type and person_involved
data4_summarized <- data4_summarized %>%
  group_by(fatality_type) %>%
  mutate(percentage = Count / sum(Count))

data4_summarized

#create a stacked bar chart
ggplot(data4_summarized, aes(x = fatality_type, y=Count, fill = person_involved)) +
  geom_bar(position = "fill", stat = "identity") +
  geom_text(aes(label = scales::percent(percentage)),
            position = position_fill(vjust = 0.5),  # Adjust text position
            show.legend = FALSE) +  # Hide legend for the text
  labs(title = "Percent Stacked Bar Chart of Fatalities",
       x = "Fatality Type",
       y = "Percentage",
       fill = "Person Involved") +
  scale_y_continuous(labels = scales::percent_format(scale = 100)) +  # Format y-axis as percentage
  theme_minimal()
```


## Graph 5: Time Series Plot

```{r, warning=FALSE}
# Create a new dataset with month-year and count columns
data5 <- data %>%
  mutate(MonthYear = format(CRASH.DATE, "%Y-%m")) %>%
  group_by(MonthYear, BOROUGH) %>%
  summarise(CrashCount = n())

# converting MonthYear in data5 to date format
data5$MonthYear <- as.Date(paste(data5$MonthYear, "01", sep = "-"))

# omit NA values
data5 <- na.omit(data5)

# Create a separate dataset for overall pattern
overall_pattern <- data5 %>%
  group_by(MonthYear) %>%
  summarise(TotalCases = sum(CrashCount))

# Create a time series line plot
ggplot(data5, aes(x = MonthYear, y = CrashCount, color = BOROUGH)) +
  geom_line(size = 1, alpha = 0.5) +
  geom_line(data = overall_pattern, aes(x = MonthYear, y = TotalCases, color = "OVERALL"), linetype = "solid", size = 1.3) +
  labs(title = "Time Series Line Plot of Case Counts by Borough",
       x = "Year",
       y = "Case Count") +
  theme_minimal() +
  scale_x_date(date_labels = "%Y", date_breaks = "1 year")

```

```{r}

```



## Graph 6: Mosaic Plot of Age vs Gender vs Type of Passengers

```{r, warning=FALSE}
library(vcd)

# reading the people data
people_data <- read.csv("people.csv")
people_data <-  mutate_all(people_data, ~ifelse(is.character(.x) & nchar(.x) == 0, NA, .x))

# taking a subset of these three columns only
data6 <- people_data[c("PERSON_AGE", "PERSON_SEX", "PERSON_TYPE")]

# omitting the rows with NA values
data6 <- na.omit(data6)

# Filter rows based on the condition for PERSON_AGE
data6 <- data6 %>%
  filter(PERSON_AGE >= 1 & PERSON_AGE <= 100)

# Create age bins with intervals of 10
labels = c("0-9", "10-19", "20-29", "30-39", "40-49", "50-59", "60-69", "70-79", "80-89", "90-100")

# Add a new column 'AgeBin' to the dataframe
data6 <- data6 %>%
  mutate(AgeBin = cut(PERSON_AGE, breaks = seq(1, 101, by=10), 
                      labels = labels, 
                      include.lowest = TRUE))

# Create a mosaic plot
mosaic(AgeBin ~ PERSON_TYPE + PERSON_SEX, data = data6, highlighting_fill = c("lightgreen", "cornflowerblue", "orange"), direction = c("v","v","h"))

```

